package com.github.peckb1.projecteuler.p011to020;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1:  1
 * 3:  1,3
 * 6:  1,2,3, 6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4, 7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {

    public static void main(String[] args) {
        System.out.println(new Problem12().triangleNumber(5));
        System.out.println(new Problem12().triangleNumber(500));
    }

    public int triangleNumber(int divisorLimit) {
        int triangleSum = 1;
        int nextValue = 1;
        int count = 0;

        while (count <= divisorLimit) {
            count = 0;
            nextValue = nextValue + 1;
            triangleSum = triangleSum + nextValue;

            int sqrt = (int)Math.sqrt(triangleSum);
            for (int i = 1; i <= sqrt; i++){
                if (triangleSum % i == 0) {
                    count = count + 2;
                }
            }
            if (triangleSum == sqrt * sqrt) {
                count--;
            }
        }
        return triangleSum;
    }

}
